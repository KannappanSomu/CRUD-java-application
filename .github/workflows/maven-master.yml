name: Master Branch

on:
  push:
    branches:
      - 'master'

jobs:

  test:
    name: Test - Units & Integrations
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0.4
      - name: Maven Package
        run: mvn -B clean package -DskipTests
      - name: Maven Verify
        run: mvn -B clean verify -Pintegration-test
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: target/surefire-reports/*.xml

  sonar:
    name: Test - SonarCloud Scan
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0.4
      - name: SonarCloud Scan
        run: mvn -B clean verify -Psonar -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  artifact:
    name: Publish - GitHub Packages
    runs-on: ubuntu-18.04
    needs: [test, sonar]

    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0.4
      - name: Publish artifact on GitHub Packages
        run: mvn -B clean deploy -DskipTests
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}


  docker:
    name: Publish - Docker Hub
    runs-on: ubuntu-18.04
    needs: [test, sonar]
    env:
      REPO: ${{ secrets.DOCKER_REPO }}

    steps:
      - uses: actions/checkout@v1
      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASS }}
      - name: Build Docker image
        run: docker build -t $REPO:${GITHUB_SHA::8} .
      - name: Publish Docker image
        run: docker push $REPO:${GITHUB_SHA::8}

  deploy:
   name: deploy to k8s
   runs-on: ubuntu-18.04
   needs: [test, sonar,docker]
   env:
     REPO: ${{ secrets.DOCKER_REPO }}
     CLUSTER_NAME: aks-cluster
     CLUSTER_RESOURCE_GROUP: aks-kanna
     APP_NAME: demo

   steps:
    # Set the target Azure Kubernetes Service (AKS) cluster. 
   - uses: azure/aks-set-context@v1
     with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
    
    # Create namespace if doesn't exist
   - run: |
        kubectl create namespace java --dry-run -o json | kubectl apply -f -
    
    # Create image pull secret for ACR
   - uses: azure/k8s-create-secret@v1
     with:
        container-registry-url:  https://registry.hub.docker.com
        container-registry-username: ${{ secrets.DOCKER_USER }}
        container-registry-password: ${{ secrets.DOCKER_PASS }}
        secret-name: docker
        namespace: java
        force: true
    
    # Deploy app to AKS
   - uses: azure/k8s-deploy@v1
     with:
        manifests: |
          manifests/deployment.yml
          manifests/service.yml
        images: |
          $REPO:${GITHUB_SHA::8}
        imagepullsecrets: |
          ${{ env.SECRET }}
        namespace: java
